Domínio "quebrado" em contextos menores.

3 microserviços: Loja, Fornecedor e Transportador

Um microsserviço é a implementação de um contexto

-------------------------------------------

Load Balancing é o processo de distribuir as requisições vindas dos usuários para as várias instâncias disponíveis.

Funcionamento do Client Side Load Balancing:

A aplicação cliente conhece as instâncias disponíveis e, usando algum algoritmo de rotação do Ribbon, 
acessa uma instância diferente a cada requisição do usuário.

-------------------------------------------

Requisição inicial (utilizando Ribbon)


@Service
public class CompraService {

	@Autowired
	private RestTemplate client;
	
	@Autowired
	private DiscoveryClient eurekaClient;
	
	public void realizaCompra(CompraDTO compra) {
		
		ResponseEntity<InfoFornecedorDTO> exchange = 
				client.exchange("http://fornecedorms/info/" + compra.getEndereco().getEstado(),
				HttpMethod.GET, null, InfoFornecedorDTO.class);
		
		eurekaClient.getInstances("fornecedorms").stream()
		.forEach(fornecedorms -> {
			System.out.println(fornecedorms.getHost() + ":" + fornecedorms.getPort());
		});
		
		System.out.println(exchange.getBody().getEndereco());
		
	}
}

--------------------------------------------

Requisição (com Spring Feign)

Anotar classe main com
@EnableFeignClients

Criar interface

@FeignClient("fornecedorms")
public interface FornecedorClient {

	@GetMapping("/info/{estado}")
	InfoFornecedorDTO getInfoPorEstado(@PathVariable String estado);
	
}

@Service
public class CompraService {
	
	@Autowired
	private FornecedorClient fornecedorClient;

	public void realizaCompra(CompraDTO compra) {
		
		InfoFornecedorDTO info = fornecedorClient.getInfoPorEstado(compra.getEndereco().getEstado());
		
		System.out.println(info.getEndereco());
		
	}

}

----------------------------------------------

O Client Side Load Balancing (CSLB) é o cliente HTTP que decide qual microsserviço recebe a requisição.

Isto é importante, pois pode ter várias instâncias do mesmo serviço no ar.

A configuração do CSLB é feita a partir da anotação @LoadBalanced, na criação do RestTemplate.

Como implementação do CSLB, usamos um projeto chamado Ribbon, que faz parte do Spring Cloud Netflix.

Para descobrir quais clientes existem, podemos injetar a interface DiscoveryClient.

Como alternativa ao RestTemplate, podemos usar o Spring Feign, que já usa o Ribbon para CSLB.

O Spring Feign exige apenas uma interface, com a definição e mapeamento dos métodos que executarão a requisição.

Toda a implementação da interface é gerada pelo Spring Feign.

-----------------------------------------------

LOGs

Papertrail (centralizador de logs dos microservicos)

https://papertrailapp.com/

Após criado um projeto, logo no começo, há a configuração de host e porta.

Help
https://documentation.solarwinds.com/en/success_center/papertrail/content/kb/configuration/java-logback-logging.htm?cshid=pt-configuration-java-logback-logging

Criar arquivo logback.xml na pasta resources

<?xml version="1.0" encoding="UTF-8"?>
<configuration>

	<appender name="PAPERTRAIL"
		class="ch.qos.logback.classic.net.SyslogAppender">
		<syslogHost>logs6.papertrailapp.com</syslogHost>
		<port>14395</port>
		<facility>USER</facility>
		<suffixPattern>my-app: %logger %msg</suffixPattern>
	</appender>

	<appender name="STDOUT"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{5} -
				%msg%n</pattern>
		</encoder>
	</appender>
	<root level="INFO">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="PAPERTRAIL" />
	</root>
</configuration>

---------------------------------------------------

LOGs (formatação com Spring Sleuth)

No pom.xml adicionar dependência

<dependency>
	<groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-sleuth</artifactId>
</dependency>

Modificar arquivo logback.xml

<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<include resource="org/springframework/boot/logging/logback/defaults.xml"/>

	<appender name="PAPERTRAIL"
		class="ch.qos.logback.classic.net.SyslogAppender">
		<syslogHost>logs6.papertrailapp.com</syslogHost>
		<port>14395</port>
		<facility>USER</facility>
		<suffixPattern>%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}</suffixPattern>
	</appender>

	<appender name="STDOUT"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{5} -
				%msg%n</pattern>
		</encoder>
	</appender>
	<root level="INFO">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="PAPERTRAIL" />
	</root>
</configuration>

---------------------------------------------------



